# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'watch_card_in_cart_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import mainwindow
import app.services.registration as reg

class Ui_WatchCartWindow(object):
    def setupUi(self, MainWindow):
        self.current_cart_cart_index = 0
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(450, 750)
        MainWindow.setMinimumSize(QtCore.QSize(450, 750))
        MainWindow.setMaximumSize(QtCore.QSize(450, 750))
        MainWindow.setStyleSheet("background-color: rgb(222, 221, 218);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-40, 0, 491, 61))
        self.label.setStyleSheet("background-color: rgb(119, 118, 123);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.pushButton_Exit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Exit.setGeometry(QtCore.QRect(360, 17, 71, 31))
        self.pushButton_Exit.setStyleSheet("background-color: rgb(224, 27, 36);")
        self.pushButton_Exit.setObjectName("pushButton_Exit")
        self.pushButton_Exit.clicked.connect(self.handle_exit)

        self.pushButton_Home = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Home.setGeometry(QtCore.QRect(270, 17, 71, 31))
        self.pushButton_Home.setStyleSheet("background-color: rgb(51, 209, 122);")
        self.pushButton_Home.setObjectName("pushButton_Home")
        self.pushButton_Home.clicked.connect(self.handle_home)

        self.label__productName = QtWidgets.QLabel(self.centralwidget)
        self.label__productName.setGeometry(QtCore.QRect(10, 70, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label__productName.setFont(font)
        self.label__productName.setObjectName("label_2")
        self.label__cost = QtWidgets.QLabel(self.centralwidget)
        self.label__cost.setGeometry(QtCore.QRect(10, 170, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label__cost.setFont(font)
        self.label__cost.setObjectName("label_3")
        self.label__descript = QtWidgets.QLabel(self.centralwidget)
        self.label__descript.setGeometry(QtCore.QRect(10, 270, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label__descript.setFont(font)
        self.label__descript.setObjectName("label_4")
        self.label_Name = QtWidgets.QLabel(self.centralwidget)
        self.label_Name.setGeometry(QtCore.QRect(10, 110, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_Name.setFont(font)
        self.label_Name.setStyleSheet("color: rgb(38, 162, 105);")
        self.label_Name.setObjectName("label_Name")
        self.label_Cost = QtWidgets.QLabel(self.centralwidget)
        self.label_Cost.setGeometry(QtCore.QRect(110, 170, 341, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_Cost.setFont(font)
        self.label_Cost.setStyleSheet("color: rgb(38, 162, 105);")
        self.label_Cost.setObjectName("label_Cost")
        self.plainTextEdit_Description = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_Description.setGeometry(QtCore.QRect(10, 310, 411, 131))
        self.plainTextEdit_Description.setReadOnly(True)
        self.plainTextEdit_Description.setPlainText("")
        self.plainTextEdit_Description.setObjectName("plainTextEdit_Description")
        self.pushButton_LookFeedbacks = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_LookFeedbacks.setGeometry(QtCore.QRect(20, 470, 401, 41))
        self.pushButton_LookFeedbacks.setStyleSheet("background-color: rgb(222, 221, 218);")
        self.pushButton_LookFeedbacks.setObjectName("pushButton_LookFeedbacks")
        self.pushButton_LookFeedbacks.clicked.connect(self.handle_look_feedback)

        self.label__rate = QtWidgets.QLabel(self.centralwidget)
        self.label__rate.setGeometry(QtCore.QRect(10, 220, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label__rate.setFont(font)
        self.label__rate.setObjectName("label_5")
        self.label_Rate = QtWidgets.QLabel(self.centralwidget)
        self.label_Rate.setGeometry(QtCore.QRect(110, 230, 341, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_Rate.setFont(font)
        self.label_Rate.setStyleSheet("color: rgb(38, 162, 105);")
        self.label_Rate.setObjectName("label_Rate")
        self.pushButton_NextCard = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_NextCard.setGeometry(QtCore.QRect(230, 660, 201, 41))
        self.pushButton_NextCard.setObjectName("pushButton_NextCard")
        self.pushButton_NextCard.clicked.connect(self.handle_next)

        self.pushButton_BeforeCard = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_BeforeCard.setGeometry(QtCore.QRect(10, 660, 201, 41))
        self.pushButton_BeforeCard.setObjectName("pushButton_BeforeCard")
        self.pushButton_BeforeCard.clicked.connect(self.handle_prev)

        self.pushButton_DeleteFromCart = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_DeleteFromCart.setGeometry(QtCore.QRect(40, 530, 361, 41))
        self.pushButton_DeleteFromCart.setStyleSheet("background-color: rgb(224, 27, 36);")
        self.pushButton_DeleteFromCart.setObjectName("pushButton_DeleteFromCart")
        self.pushButton_DeleteFromCart.clicked.connect(self.handle_delete)

        self.pushButton_BuyProduct = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_BuyProduct.setGeometry(QtCore.QRect(40, 590, 361, 41))
        self.pushButton_BuyProduct.setStyleSheet("background-color: rgb(51, 209, 122);")
        self.pushButton_BuyProduct.setObjectName("pushButton_BuyProduct")
        self.pushButton_BuyProduct.clicked.connect(self.handle_buy_product)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.set_current_data()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Scamberries - Корзина"))
        self.pushButton_Exit.setText(_translate("MainWindow", "Exit"))
        self.pushButton_Home.setText(_translate("MainWindow", "Home"))
        self.label__productName.setText(_translate("MainWindow", "Название товара:"))
        self.label__cost.setText(_translate("MainWindow", "Цена ($):"))
        self.label__descript.setText(_translate("MainWindow", "Описание:"))
        self.pushButton_LookFeedbacks.setText(_translate("MainWindow", "Посмотреть отзывы"))
        self.label__rate.setText(_translate("MainWindow", "Оценка:"))
        self.pushButton_NextCard.setText(_translate("MainWindow", "Следующее"))
        self.pushButton_BeforeCard.setText(_translate("MainWindow", "Предыдущее"))
        self.pushButton_DeleteFromCart.setText(_translate("MainWindow", "Удалить из корзины"))
        self.pushButton_BuyProduct.setText(_translate("MainWindow", "Купить"))


    def set_data(self, name, cost, description, rate):
        self.label_Name.setText(name)
        self.label_Cost.setText(cost)
        self.label_Rate.setText(rate)
        self.plainTextEdit_Description.setPlainText(description)


    def set_current_data(self):
        name = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][0].name
        cost = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][0].cost
        descr = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][0].description
        rate = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][0].average_rating

        self.set_data(name, cost, descr, str(rate))


    def next(self):
        if (self.current_cart_cart_index == len(reg.registered_buyers[
            mainwindow.current_buyer_account_ind].shopping_cart.product_card_list) - 1):
            return
        self.current_cart_cart_index += 1


    def prev(self):
        if (self.current_cart_cart_index == 0):
            return
        self.current_cart_cart_index -= 1


    def handle_home(self):
        import gui_utils
        from gui.buyer_mode_window import Ui_BuyerModeWindow
        gui_utils.change_window(Ui_BuyerModeWindow())


    def handle_exit(self):
        from welcome_window import Ui_WelcomeWindow
        import gui_utils
        gui_utils.change_window(Ui_WelcomeWindow())


    def handle_next(self):
        self.next()
        self.set_current_data()


    def handle_prev(self):
        self.prev()
        self.set_current_data()


    def handle_look_feedback(self):
        from watch_feedback_window import Ui_WatchFeedbackWindow
        import gui_utils

        current_seller = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][2]
        current_card = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][3]

        if len(reg.registered_sellers[current_seller].product_cards_list[current_card].feedbacks) == 0:
            return

        gui_utils.change_window(Ui_WatchFeedbackWindow(), current_seller, current_card)


    def handle_buy_product(self):
        import app.services.registration as reg
        current_seller = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][2]
        current_card = reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list[
            self.current_cart_cart_index][3]

        for i in range(len(reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products)):
            name_ = reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products[i][0].name
            cost_ = reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products[i][0].cost
            des_ = reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products[i][0].description
            if self.label_Name.text() == name_ and self.label_Cost.text() == cost_ and self.plainTextEdit_Description.toPlainText() == des_:
                reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products[i][1] += 1
                return

        reg.registered_buyers[mainwindow.current_buyer_account_ind].bought_products.bought_products.append([
            reg.registered_sellers[current_seller].product_cards_list[current_card], 1, current_seller, current_card])


    def handle_delete(self):
        reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list.pop(
            self.current_cart_cart_index)

        if len(reg.registered_buyers[mainwindow.current_buyer_account_ind].shopping_cart.product_card_list) == 0:
            self.handle_home()
            return

        if self.current_cart_cart_index == len(reg.registered_buyers[
                mainwindow.current_buyer_account_ind].shopping_cart.product_card_list):
            self.current_cart_cart_index -= 1

        self.set_current_data()


# удалить из корзины