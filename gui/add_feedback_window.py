# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_feedback_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import app.services.registration as reg


def get_rate(*args) -> int:
    for i in range(len(args)):
        if args[i]:
            return i + 1
    return 0


class Ui_AddFeedbackWindow(object):
    def setupUi(self, MainWindow, current_seller_index, current_card_index, current_bought_card_index):
        self.current_seller_index: int = current_seller_index
        self.current_card_index: int = current_card_index
        self.current_bought_card_index: int = current_bought_card_index
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(450, 750)
        MainWindow.setMinimumSize(QtCore.QSize(450, 750))
        MainWindow.setMaximumSize(QtCore.QSize(450, 750))
        MainWindow.setStyleSheet("background-color: rgb(222, 221, 218);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-40, 0, 491, 61))
        self.label.setStyleSheet("background-color: rgb(119, 118, 123);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.pushButton_Exit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Exit.setGeometry(QtCore.QRect(360, 17, 71, 31))
        self.pushButton_Exit.setStyleSheet("background-color: rgb(224, 27, 36);")
        self.pushButton_Exit.setObjectName("pushButton_Exit")
        self.pushButton_Exit.clicked.connect(self.handle_exit)

        self.pushButton_Home = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Home.setGeometry(QtCore.QRect(270, 17, 71, 31))
        self.pushButton_Home.setStyleSheet("background-color: rgb(51, 209, 122);")
        self.pushButton_Home.setObjectName("pushButton_Home")
        self.pushButton_Home.clicked.connect(self.handle_home)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.radioButton_grade1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_grade1.setGeometry(QtCore.QRect(10, 110, 132, 21))
        self.radioButton_grade1.setObjectName("radioButton_grade1")
        self.radioButton_grade2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_grade2.setGeometry(QtCore.QRect(10, 130, 132, 21))
        self.radioButton_grade2.setObjectName("radioButton_grade2")
        self.radioButton_grade3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_grade3.setGeometry(QtCore.QRect(10, 150, 132, 21))
        self.radioButton_grade3.setObjectName("radioButton_grade3")
        self.radioButton_grade4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_grade4.setGeometry(QtCore.QRect(10, 170, 132, 21))
        self.radioButton_grade4.setObjectName("radioButton_grade4")
        self.radioButton_grade5 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_grade5.setGeometry(QtCore.QRect(10, 190, 132, 21))
        self.radioButton_grade5.setObjectName("radioButton_grade5")
        self.plainTextEdit_feedbackText = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_feedbackText.setGeometry(QtCore.QRect(20, 300, 381, 191))
        self.plainTextEdit_feedbackText.setStyleSheet("background-color: rgb(246, 245, 244);")
        self.plainTextEdit_feedbackText.setObjectName("plainTextEdit_feedbackText")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 260, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton_addFeedback = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_addFeedback.setGeometry(QtCore.QRect(40, 640, 361, 51))
        self.pushButton_addFeedback.setStyleSheet("background-color: rgb(246, 211, 45);")
        self.pushButton_addFeedback.setObjectName("pushButton_addFeedback")
        self.pushButton_addFeedback.clicked.connect(self.handle_addFeedback)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_Exit.setText(_translate("MainWindow", "Exit"))
        self.pushButton_Home.setText(_translate("MainWindow", "Home"))
        self.label_2.setText(_translate("MainWindow", "Оценка:"))
        self.radioButton_grade1.setText(_translate("MainWindow", "1"))
        self.radioButton_grade2.setText(_translate("MainWindow", "2"))
        self.radioButton_grade3.setText(_translate("MainWindow", "3"))
        self.radioButton_grade4.setText(_translate("MainWindow", "4"))
        self.radioButton_grade5.setText(_translate("MainWindow", "5"))
        self.label_3.setText(_translate("MainWindow", "Подробности:"))
        self.pushButton_addFeedback.setText(_translate("MainWindow", "Добавить отзыв"))


    def current_rate(self) -> int:
        return get_rate(
            self.radioButton_grade1.isChecked(),
            self.radioButton_grade2.isChecked(),
            self.radioButton_grade3.isChecked(),
            self.radioButton_grade4.isChecked(),
            self.radioButton_grade5.isChecked()
        )


    def update_rate(self):
        rate = self.current_rate()
        reg.registered_sellers[self.current_seller_index].product_cards_list[self.current_card_index].buy_count += 1
        reg.registered_sellers[self.current_seller_index].product_cards_list[self.current_card_index].sum_of_ratings += rate
        reg.registered_sellers[self.current_seller_index].product_cards_list[self.current_card_index].update_average_rate()



    def handle_exit(self):
        from welcome_window import Ui_WelcomeWindow
        import gui_utils
        gui_utils.change_window(Ui_WelcomeWindow())


    def handle_home(self):
        import gui_utils
        from gui.buyer_mode_window import Ui_BuyerModeWindow
        gui_utils.change_window(Ui_BuyerModeWindow())

    def handle_addFeedback(self):
        import mainwindow
        import app.models.feedback as fb
        rate = self.current_rate()
        if rate == 0:
            return
        des = self.plainTextEdit_feedbackText.toPlainText()
        reg.registered_sellers[self.current_seller_index].product_cards_list[self.current_card_index].add_feedback(
            fb.Feedback(mainwindow.current_buyer_account_ind, rate, des)
        )
        self.update_rate()
        print("Добавлен отзыв")
        self.handle_home()

